@using Microsoft.AspNetCore.Components
@using MudBlazor

<MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item, dropzone) => item.Customer == dropzone)" ItemDropped="ItemUpdated" Elevation="16">
    <ChildContent>
        <MudPaper MinHeight="500px" Class="d-flex flex-column flex-1">
            <MudList>
                @foreach (var customer in _customers) 
                {
                    <MudListItem Icon="@Icons.Material.Filled.People" Text="@customer.Name" InitiallyExpanded="true">
                        <NestedList>
                            <MudDropZone T="DropItem" Identifier="@customer.Name">
                                <MudList>
                                    <MudListItem Dense="true" Class="pl-8"/>
                                </MudList>
                            </MudDropZone>
                        </NestedList>
                    </MudListItem>
                }
                    <MudListItem Elevation="6">
                        <MudSimpleTable>
                            <thead>
                                <tr>
                                    <th style="width: 25%;"><MudTextField @bind-Value="_newCustomerName" Label="New Customer" /></th>
                                    <th style="width: 25%;"><MudButton Color="Color.Tertiary" OnClick="AddNewCustomer" Variant="Variant.Filled">Add Friend</MudButton></th>
                                    <th style="text-align: right;"></th>
                                    <th style="text-align: right;" class="total-price">
                                        <MudText>@($"Total: {GetGrandTotal():C}")</MudText>
                                        <MudButton Color="Color.Tertiary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send">Checkout</MudButton>
                                    </th>
                                </tr>
                            </thead>
                        </MudSimpleTable>
                    </MudListItem>
            </MudList>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudListItem>
            <MudListItemText>
                <div class="item-info">
                    <span class="blank-cell"></span>
                    <span class="item-name">@context.Name</span>
                    <span class="item-quantity">Quantity: @context.Quantity</span>
                    <span class="item-price">$@context.Price.ToString("C")</span>
                </div>
            </MudListItemText>
        </MudListItem>
        <MudDivider/>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Customer = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = "Item 1", Price = 12.99m, Quantity = 2, Customer = "Bob" },
        new DropItem(){ Name = "Item 2", Price = 8.50m, Quantity = 1, Customer = "Bob" },
        new DropItem(){ Name = "Item 3", Price = 3.99m, Quantity = 4, Customer = "Bob" },
        new DropItem(){ Name = "Item 4", Price = 15.99m, Quantity = 2, Customer = "Alice" },
        new DropItem(){ Name = "Item 5", Price = 25.00m, Quantity = 1, Customer = "Alice" },
        new DropItem(){ Name = "Item 6", Price = 5.99m, Quantity = 3, Customer = "Alice" },
    };

    public class DropItem
    {
        public string Name { get; init; }
        public decimal Price { get; init; }
        public int Quantity { get; init; }
        public string Customer { get; set; }
    }



    private class Customer
    {
        public string Name { get; set; }
        public bool InitiallyExpanded { get; set; }
    }

    private List<Customer> _customers = new()
    {
        new Customer { Name = "Bob", InitiallyExpanded = true },
        new Customer { Name = "Alice", InitiallyExpanded = false }
    };

    private decimal GetGrandTotal()
    {
        return _items.Sum(item => item.Quantity * item.Price);
    }

    private string _newCustomerName;

    private void AddNewCustomer()
    {
        if (!string.IsNullOrEmpty(_newCustomerName))
        {
            _customers.Add(new Customer { Name = _newCustomerName, InitiallyExpanded = true });
            _newCustomerName = string.Empty;
            StateHasChanged();
        }
    }
}
}

<style>
    .item-info {
        display: flex;
        justify-content: space-between;
    }

    .item-name,
    .item-quantity,
    .item-price {
        font-weight: bold;
    }

    .total-price{ 
        font-size: xx-large;
        font-weight: bold;
    }
</style>
