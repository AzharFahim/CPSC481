@using Microsoft.AspNetCore.Components
@using MudBlazor
@inject StateContainer StateContainer
@inject IDialogService DialogService

@* If multiple customers on the order, we create the dyanmic screen with drag/drop and collapsable menu features *@
@if (@StateContainer._customers.Count > 1)
{
<MudDropContainer T="DropItem" Items="@StateContainer._items" ItemsSelector="@((item, dropzone) => item.Customer == dropzone)" ItemDropped="ItemUpdated" Elevation="16">
    <ChildContent>
        <MudPaper MinHeight="500px" Class="d-flex flex-column flex-1">
            <MudSimpleTable>
                <thead>
                    <tr>
                        <th Class="table-content">Patron</th>
                        <th Class="table-content">Menu Items</th>
                        <th Class="table-content">Quantity</th>
                        <th Class="table-content-price">Price</th>
                    </tr>
                </thead>
            </MudSimpleTable>
            <MudList Class="mudlist-multi-patron-mode">
                @foreach (var customer in @StateContainer._customers) 
                {
                            <MudDropZone T="DropItem" Identifier="@customer.Name" Class="nested-item">
                    <MudListItem Icon="@Icons.Material.Filled.EmojiEmotions"  Color="Color.Success" Text="@customer.Name" InitiallyExpanded="true" Class="customer-name">
                        <NestedList>
                                <MudList>
                                    <MudListItem Dense="true" Class="pl-8"/>
                                </MudList>
                        </NestedList>
                    </MudListItem>
                            </MudDropZone>
                }
            </MudList>
            <MudSimpleTable>
                <thead>
                    <tr>
                        <th style="width: 25%;"><MudTextField @bind-Value="_newCustomerName" Label="Add Patron" /></th>
                        <th style="width: 25%;"><MudButton Color="Color.Tertiary" OnClick="AddNewCustomer" Variant="Variant.Filled">Add Patron</MudButton></th>
                        <th style="width: 25%; text-align: right;"></th>
                        <th style="text-align: right;" Class="total-price">
                            <MudText style="font-weight: bold; font-size: 24px;">Total: $@($"{GetGrandTotal():C}")</MudText>
                            <MudButton Color="Color.Tertiary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send">Checkout</MudButton>
                        </th>
                    </tr>
                </thead>
            </MudSimpleTable>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudListItem>
            <MudListItemText>
                <div class="item-info">
                    <span class="table-content"></span>
                    <span class="item-name">
                        <MudIconButton  @onclick="ConfirmRemoveItem" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small">Remove</MudIconButton>
                        &emsp; &emsp; &emsp; &emsp; &emsp; 
                        @context.Name 
                    </span>
                    <span class="item-quantity">
                    <MudStack Row="true">
                        <MudIconButton  Variant="Variant.Filled" Icon="@Icons.Material.Filled.Remove" Color="Color.Secondary" Size="Size.Small" OnClick="@(() => UpdateQuantity(context, context.Quantity > 0 ? context.Quantity - 1 : context.Quantity))" />
                        <MudText style="font-weight: bold; ">@context.Quantity</MudText>
                        <MudIconButton  Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Size="Size.Small" OnClick="@(() => UpdateQuantity(context, context.Quantity + 1))" />
                    </MudStack>
                    </span>
                    <span class="item-price">$@context.Price.ToString("C")</span>
                </div>
            </MudListItemText>
        </MudListItem>
        <MudDivider/>
    </ItemRenderer>
</MudDropContainer>
}






@* Loads the Layout Assuming only one customer is in the order *@
else
{
<MudDropContainer T="DropItem" Items="@StateContainer._items" ItemsSelector="@((item, dropzone) => item.Customer == dropzone)" ItemDropped="ItemUpdated" Elevation="16">
    <ChildContent>
        <MudPaper MinHeight="500px" Class="d-flex flex-column flex-1">
            <MudSimpleTable>
                <thead>
                    <tr>
                        <th Class="table-content">Patron</th>
                        <th Class="table-content">Menu Items</th>
                        <th Class="table-content">Quantity</th>
                        <th Class="table-content-price">Price</th>
                    </tr>
                </thead>
            </MudSimpleTable>
            <MudList Class="mudlist-single-patron-mode">
                @foreach (var customer in @StateContainer._customers) 
                {
                            <MudDropZone T="DropItem" Identifier="@customer.Name" Class="nested-item">
                    <MudListItem Icon="@Icons.Material.Filled.EmojiEmotions"  Color="Color.Success" Text="@customer.Name" InitiallyExpanded="true" Class="customer-name">
                        <NestedList>
                                <MudList>
                                    <MudListItem Dense="true" Class="pl-8"/>
                                </MudList>
                        </NestedList>
                    </MudListItem>
                            </MudDropZone>
                }
            </MudList>
            <MudSimpleTable>
                <thead>
                    <tr>
                        <th style="width: 25%;"><MudTextField @bind-Value="_newCustomerName" Label="Add Patron" /></th>
                        <th style="width: 25%;"><MudButton Color="Color.Tertiary" OnClick="AddNewCustomer" Variant="Variant.Filled">Add Patron</MudButton></th>
                        <th style="width: 25%; text-align: right;"></th>
                        <th style="text-align: right;" class="total-price">
                            <MudText style="font-weight: bold; font-size: 24px;">Total: $@($"{GetGrandTotal():C}")</MudText>
                            <MudButton Color="Color.Tertiary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send">Checkout</MudButton>
                        </th>
                    </tr>
                </thead>
            </MudSimpleTable>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudListItem>
            <MudListItemText>
                <div class="item-info">
                    <span class="table-content"></span>
                    <span class="item-name">
                        <MudIconButton  @onclick="ConfirmRemoveItem" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small">Remove</MudIconButton>
                        &emsp; &emsp; &emsp; &emsp; &emsp; 
                        @context.Name 
                    </span>
                    <span class="item-quantity">
                    <MudStack Row="true">
                        <MudIconButton  Variant="Variant.Filled" Icon="@Icons.Material.Filled.Remove" Color="Color.Secondary" Size="Size.Small" OnClick="@(() => UpdateQuantity(context, context.Quantity > 0 ? context.Quantity - 1 : context.Quantity))" />
                        <MudText style="font-weight: bold; ">@context.Quantity</MudText>
                        <MudIconButton  Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Size="Size.Small" OnClick="@(() => UpdateQuantity(context, context.Quantity + 1))" />
                    </MudStack>
                    </span>
                    <span class="item-price">$@context.Price.ToString("C")</span>
                </div>
            </MudListItemText>
        </MudListItem>
        <MudDivider/>
    </ItemRenderer>
</MudDropContainer>
}

@code {
    private void ConfirmRemoveItem()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<DialogConfirmRemoveItem>("Confirm Remove Dialog", options);
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Customer = dropItem.DropzoneIdentifier;
    }

    private decimal GetGrandTotal()
    {
        return @StateContainer._items.Sum(item => item.Quantity * item.Price);
    }

    private string _newCustomerName;

    private void AddNewCustomer()
    {
        if (_newCustomerName != null) {
            StateContainer.AddCustomer(new Customer { Name = _newCustomerName, InitiallyExpanded = false });
            StateHasChanged();
        } else {
            StateContainer.AddCustomer(new Customer { Name = "Patron " + (@StateContainer._customers.Count + 1).ToString(), InitiallyExpanded = false });
        }
    }

    private void UpdateQuantity(DropItem item, int newQuantity)
    {
        item.Quantity = newQuantity;
        StateHasChanged();
    }
}

<style>
    .table-content {
        width: 25%; 
        font-weight: bold;
    }
    .table-content-price {
        width: 25%; 
        font-weight: bold; 
        text-align: right;
    }
    .mudlist-multi-patron-mode {
        height: 650px; 
        overflow-y: auto;
    }
    .mudlist-single-patron-mode {
        height: 400px; 
        overflow-y: auto;
    }

    .item-info {
        display: flex;
        justify-content: space-between;
    }

    .customer-name {
        font-weight: bold;

    }

    .item-name,
    .item-quantity{
        width: 25%;
        font-weight: bold;
    }
    .item-price {
        width: 25%;
        font-weight: bold;
        text-align: right;
    }

    .total-price{ 
        font-size: xx-large;
        font-weight: bold;
    }

    .nested-item {
        background-color: #ffffff;
    }

    .quantity-field {
        width: 10%;
    }
</style>
